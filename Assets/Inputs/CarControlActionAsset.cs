//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.1
//     from Assets/Inputs/CarControlActionAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @CarControlActionAsset: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CarControlActionAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CarControlActionAsset"",
    ""maps"": [
        {
            ""name"": ""Pedal"",
            ""id"": ""836bb158-1ca4-4d17-b4aa-81394c2a81a8"",
            ""actions"": [
                {
                    ""name"": ""Gas"",
                    ""type"": ""Button"",
                    ""id"": ""f424504a-0b8a-4cd1-9291-bb9fc26696b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Button"",
                    ""id"": ""12ddedf8-046f-4522-a872-fdcceb43c5fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""88269a30-51f0-4061-bf4f-9c2a826fd2b0"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gas"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""637a126a-e33a-4559-942b-fb54d6dd72ae"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Steer"",
            ""id"": ""2dee54fc-3e9d-4110-8c3d-caab3a2259d0"",
            ""actions"": [
                {
                    ""name"": ""Wheel"",
                    ""type"": ""Value"",
                    ""id"": ""b666a949-3ef2-4cfd-9db4-e9cfbc40f6fc"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""8e69d72c-447f-48c3-bc61-6db3482b8ac3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Wheel"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9cf8f0c7-6cb9-4d4d-8458-707af863df2b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Wheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""742f0813-41db-44c0-955f-de9178cf21fc"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Wheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Pedal
        m_Pedal = asset.FindActionMap("Pedal", throwIfNotFound: true);
        m_Pedal_Gas = m_Pedal.FindAction("Gas", throwIfNotFound: true);
        m_Pedal_Brake = m_Pedal.FindAction("Brake", throwIfNotFound: true);
        // Steer
        m_Steer = asset.FindActionMap("Steer", throwIfNotFound: true);
        m_Steer_Wheel = m_Steer.FindAction("Wheel", throwIfNotFound: true);
    }

    ~@CarControlActionAsset()
    {
        Debug.Assert(!m_Pedal.enabled, "This will cause a leak and performance issues, CarControlActionAsset.Pedal.Disable() has not been called.");
        Debug.Assert(!m_Steer.enabled, "This will cause a leak and performance issues, CarControlActionAsset.Steer.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Pedal
    private readonly InputActionMap m_Pedal;
    private List<IPedalActions> m_PedalActionsCallbackInterfaces = new List<IPedalActions>();
    private readonly InputAction m_Pedal_Gas;
    private readonly InputAction m_Pedal_Brake;
    public struct PedalActions
    {
        private @CarControlActionAsset m_Wrapper;
        public PedalActions(@CarControlActionAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Gas => m_Wrapper.m_Pedal_Gas;
        public InputAction @Brake => m_Wrapper.m_Pedal_Brake;
        public InputActionMap Get() { return m_Wrapper.m_Pedal; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PedalActions set) { return set.Get(); }
        public void AddCallbacks(IPedalActions instance)
        {
            if (instance == null || m_Wrapper.m_PedalActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PedalActionsCallbackInterfaces.Add(instance);
            @Gas.started += instance.OnGas;
            @Gas.performed += instance.OnGas;
            @Gas.canceled += instance.OnGas;
            @Brake.started += instance.OnBrake;
            @Brake.performed += instance.OnBrake;
            @Brake.canceled += instance.OnBrake;
        }

        private void UnregisterCallbacks(IPedalActions instance)
        {
            @Gas.started -= instance.OnGas;
            @Gas.performed -= instance.OnGas;
            @Gas.canceled -= instance.OnGas;
            @Brake.started -= instance.OnBrake;
            @Brake.performed -= instance.OnBrake;
            @Brake.canceled -= instance.OnBrake;
        }

        public void RemoveCallbacks(IPedalActions instance)
        {
            if (m_Wrapper.m_PedalActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPedalActions instance)
        {
            foreach (var item in m_Wrapper.m_PedalActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PedalActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PedalActions @Pedal => new PedalActions(this);

    // Steer
    private readonly InputActionMap m_Steer;
    private List<ISteerActions> m_SteerActionsCallbackInterfaces = new List<ISteerActions>();
    private readonly InputAction m_Steer_Wheel;
    public struct SteerActions
    {
        private @CarControlActionAsset m_Wrapper;
        public SteerActions(@CarControlActionAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Wheel => m_Wrapper.m_Steer_Wheel;
        public InputActionMap Get() { return m_Wrapper.m_Steer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SteerActions set) { return set.Get(); }
        public void AddCallbacks(ISteerActions instance)
        {
            if (instance == null || m_Wrapper.m_SteerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SteerActionsCallbackInterfaces.Add(instance);
            @Wheel.started += instance.OnWheel;
            @Wheel.performed += instance.OnWheel;
            @Wheel.canceled += instance.OnWheel;
        }

        private void UnregisterCallbacks(ISteerActions instance)
        {
            @Wheel.started -= instance.OnWheel;
            @Wheel.performed -= instance.OnWheel;
            @Wheel.canceled -= instance.OnWheel;
        }

        public void RemoveCallbacks(ISteerActions instance)
        {
            if (m_Wrapper.m_SteerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISteerActions instance)
        {
            foreach (var item in m_Wrapper.m_SteerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SteerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SteerActions @Steer => new SteerActions(this);
    public interface IPedalActions
    {
        void OnGas(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
    }
    public interface ISteerActions
    {
        void OnWheel(InputAction.CallbackContext context);
    }
}
